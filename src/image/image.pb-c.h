/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: image.proto */

#ifndef PROTOBUF_C_image_2eproto__INCLUDED
#define PROTOBUF_C_image_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _VmaEntry VmaEntry;
typedef struct _FdinfoEntry FdinfoEntry;
typedef struct _Fdinfo Fdinfo;
typedef struct _MmStruct MmStruct;
typedef struct _Image Image;


/* --- enums --- */


/* --- messages --- */

struct  _VmaEntry
{
  ProtobufCMessage base;
  uint64_t start;
  uint64_t end;
  uint64_t pgoff;
  uint32_t prot;
  uint32_t flags;
};
#define VMA_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vma_entry__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _FdinfoEntry
{
  ProtobufCMessage base;
  uint32_t fd;
  uint32_t flags;
  uint64_t offset;
};
#define FDINFO_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fdinfo_entry__descriptor) \
    , 0, 0, 0 }


struct  _Fdinfo
{
  ProtobufCMessage base;
  size_t n_fdinfo_entries;
  FdinfoEntry **fdinfo_entries;
};
#define FDINFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fdinfo__descriptor) \
    , 0,NULL }


struct  _MmStruct
{
  ProtobufCMessage base;
  uint64_t start;
  uint64_t size;
  size_t n_vma_entries;
  VmaEntry **vma_entries;
};
#define MM_STRUCT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mm_struct__descriptor) \
    , 0, 0, 0,NULL }


struct  _Image
{
  ProtobufCMessage base;
  Fdinfo *fileinfo;
  MmStruct *meminfo;
};
#define IMAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&image__descriptor) \
    , NULL, NULL }


/* VmaEntry methods */
void   vma_entry__init
                     (VmaEntry         *message);
size_t vma_entry__get_packed_size
                     (const VmaEntry   *message);
size_t vma_entry__pack
                     (const VmaEntry   *message,
                      uint8_t             *out);
size_t vma_entry__pack_to_buffer
                     (const VmaEntry   *message,
                      ProtobufCBuffer     *buffer);
VmaEntry *
       vma_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vma_entry__free_unpacked
                     (VmaEntry *message,
                      ProtobufCAllocator *allocator);
/* FdinfoEntry methods */
void   fdinfo_entry__init
                     (FdinfoEntry         *message);
size_t fdinfo_entry__get_packed_size
                     (const FdinfoEntry   *message);
size_t fdinfo_entry__pack
                     (const FdinfoEntry   *message,
                      uint8_t             *out);
size_t fdinfo_entry__pack_to_buffer
                     (const FdinfoEntry   *message,
                      ProtobufCBuffer     *buffer);
FdinfoEntry *
       fdinfo_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fdinfo_entry__free_unpacked
                     (FdinfoEntry *message,
                      ProtobufCAllocator *allocator);
/* Fdinfo methods */
void   fdinfo__init
                     (Fdinfo         *message);
size_t fdinfo__get_packed_size
                     (const Fdinfo   *message);
size_t fdinfo__pack
                     (const Fdinfo   *message,
                      uint8_t             *out);
size_t fdinfo__pack_to_buffer
                     (const Fdinfo   *message,
                      ProtobufCBuffer     *buffer);
Fdinfo *
       fdinfo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fdinfo__free_unpacked
                     (Fdinfo *message,
                      ProtobufCAllocator *allocator);
/* MmStruct methods */
void   mm_struct__init
                     (MmStruct         *message);
size_t mm_struct__get_packed_size
                     (const MmStruct   *message);
size_t mm_struct__pack
                     (const MmStruct   *message,
                      uint8_t             *out);
size_t mm_struct__pack_to_buffer
                     (const MmStruct   *message,
                      ProtobufCBuffer     *buffer);
MmStruct *
       mm_struct__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mm_struct__free_unpacked
                     (MmStruct *message,
                      ProtobufCAllocator *allocator);
/* Image methods */
void   image__init
                     (Image         *message);
size_t image__get_packed_size
                     (const Image   *message);
size_t image__pack
                     (const Image   *message,
                      uint8_t             *out);
size_t image__pack_to_buffer
                     (const Image   *message,
                      ProtobufCBuffer     *buffer);
Image *
       image__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   image__free_unpacked
                     (Image *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*VmaEntry_Closure)
                 (const VmaEntry *message,
                  void *closure_data);
typedef void (*FdinfoEntry_Closure)
                 (const FdinfoEntry *message,
                  void *closure_data);
typedef void (*Fdinfo_Closure)
                 (const Fdinfo *message,
                  void *closure_data);
typedef void (*MmStruct_Closure)
                 (const MmStruct *message,
                  void *closure_data);
typedef void (*Image_Closure)
                 (const Image *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor vma_entry__descriptor;
extern const ProtobufCMessageDescriptor fdinfo_entry__descriptor;
extern const ProtobufCMessageDescriptor fdinfo__descriptor;
extern const ProtobufCMessageDescriptor mm_struct__descriptor;
extern const ProtobufCMessageDescriptor image__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_image_2eproto__INCLUDED */
